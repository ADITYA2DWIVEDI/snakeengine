import React from 'react';
import { generatePresentationOutline } from '../../../../services/geminiService';
import { Presentation } from '../../../../types';
import { Icon } from '../../../icons';
import Spinner from '../../../common/Spinner';

const PresentationGeneratorView: React.FC = () => {
    const [topic, setTopic] = React.useState('');
    const [isLoading, setIsLoading] = React.useState(false);
    const [error, setError] = React.useState<string | null>(null);
    const [result, setResult] = React.useState<Presentation | null>(null);
    const [currentSlide, setCurrentSlide] = React.useState(0);

    const handleGenerate = async () => {
        if (!topic.trim()) {
            setError('Please enter a topic for the presentation.');
            return;
        }
        setIsLoading(true);
        setError(null);
        setResult(null);
        setCurrentSlide(0);

        try {
            const response = await generatePresentationOutline(topic);
            const parsedResult = JSON.parse(response.text) as Presentation;
            setResult(parsedResult);
        } catch (e: any) {
            setError(`Failed to generate presentation: ${e.message}`);
        } finally {
            setIsLoading(false);
        }
    };

    const slide = result?.slides[currentSlide];

    return (
        <div className="h-full flex flex-col">
            <div className="flex-shrink-0">
                <div className="w-full bg-white dark:bg-slate-800 p-4 rounded-xl shadow-md flex items-center gap-4 mb-6">
                    <input
                        type="text"
                        value={topic}
                        onChange={(e) => setTopic(e.target.value)}
                        placeholder="e.g., The Future of Renewable Energy"
                        className="w-full bg-slate-100 dark:bg-slate-700 rounded-lg p-3 focus:outline-none focus:ring-2 focus:ring-purple-500"
                    />
                    <button
                        onClick={handleGenerate}
                        disabled={isLoading}
                        className="px-6 py-3 bg-purple-600 dark:bg-teal-600 text-white font-semibold rounded-lg hover:bg-purple-500 disabled:bg-slate-400 flex items-center gap-2"
                    >
                        {isLoading ? <Spinner /> : <Icon name="brain" className="w-5 h-5"/>}
                        {isLoading ? 'Generating...' : 'Generate Slides'}
                    </button>
                </div>
                {error && <p className="text-red-500 text-sm mb-4 text-center">{error}</p>}
            </div>

            <div className="flex-1 min-h-0 bg-slate-200/50 dark:bg-slate-800/50 rounded-2xl shadow-lg p-6 flex flex-col justify-between">
                {isLoading ? (
                    <div className="h-full flex items-center justify-center text-center"><Spinner /><p className="ml-2">Generating presentation...</p></div>
                ) : !result ? (
                    <div className="h-full flex flex-col items-center justify-center text-slate-500 text-center">
                        <Icon name="grid" className="w-16 h-16 mx-auto mb-4 opacity-50" />
                        <p>Your presentation slides will appear here.</p>
                    </div>
                ) : (
                    <div className="flex-1 flex flex-col justify-center items-center text-center bg-white dark:bg-slate-800 rounded-lg p-8 animate-fade-in">
                        {currentSlide === 0 ? (
                            <div>
                                <h1 className="text-4xl font-bold gradient-text">{result.mainTitle}</h1>
                                <p className="text-slate-500 mt-2">A presentation generated by SnakeEngine.AI</p>
                            </div>
                        ) : slide ? (
                            <div className="w-full text-left">
                                <h2 className="text-3xl font-bold text-slate-800 dark:text-slate-100">{slide.title}</h2>
                                <ul className="mt-6 space-y-4 pl-5">
                                    {slide.points.map((point, i) => (
                                        <li key={i} className="flex items-start text-lg text-slate-600 dark:text-slate-300">
                                            <Icon name="checkmark" className="w-5 h-5 text-green-500 mr-3 mt-1.5 flex-shrink-0" />
                                            <span>{point}</span>
                                        </li>
                                    ))}
                                </ul>
                            </div>
                        ) : null}
                    </div>
                )}
                 {result && (
                    <div className="flex-shrink-0 flex items-center justify-between pt-4">
                        <button onClick={() => setCurrentSlide(s => Math.max(0, s - 1))} disabled={currentSlide === 0} className="px-4 py-2 flex items-center gap-2 rounded-lg bg-white dark:bg-slate-700 disabled:opacity-50"><Icon name="chevron-left" className="w-4 h-4" /> Prev</button>
                        <span className="text-sm font-semibold text-slate-500">{currentSlide + 1} / {result.slides.length + 1}</span>
                        <button onClick={() => setCurrentSlide(s => Math.min(result.slides.length, s + 1))} disabled={currentSlide === result.slides.length} className="px-4 py-2 flex items-center gap-2 rounded-lg bg-white dark:bg-slate-700 disabled:opacity-50">Next <Icon name="chevron-right" className="w-4 h-4" /></button>
                    </div>
                )}
            </div>
        </div>
    );
};

export default PresentationGeneratorView;
